name: Security Scan

on:
  # push:
  #   branches:
  #     - main
  #     - develop
  # pull_request:
  #   branches:
  #     - main
  #     - develop
  # schedule:
  #   # Run security scans daily at 2 AM UTC
  #   - cron: '0 2 * * *'
  workflow_dispatch:

permissions:
  contents: read
  security-events: write
  pull-requests: write

jobs:
  terraform-security:
    name: Terraform Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: latest
      
      - name: Terraform Format Check
        id: fmt
        run: |
          echo "Checking Terraform formatting..."
          if find . -name "*.tf" -type f | head -1 | grep -q .; then
            terraform fmt -check -recursive -diff || echo "::warning::Terraform files are not properly formatted"
          else
            echo "No Terraform files found to check"
          fi
        continue-on-error: true
      
      - name: Terraform Init (if tf files exist)
        id: init
        run: |
          if find . -name "*.tf" -type f | head -1 | grep -q .; then
            for dir in $(find . -name "*.tf" -exec dirname {} \; | sort -u); do
              echo "Initializing $dir..."
              cd "$dir"
              terraform init -backend=false || echo "::warning::Failed to init $dir"
              cd - > /dev/null
            done
          else
            echo "No Terraform files found to initialize"
          fi
        continue-on-error: true
      
      - name: Terraform Validate
        id: validate
        run: |
          if find . -name "*.tf" -type f | head -1 | grep -q .; then
            for dir in $(find . -name "*.tf" -exec dirname {} \; | sort -u); do
              echo "Validating $dir..."
              cd "$dir"
              terraform validate || echo "::warning::Validation failed for $dir"
              cd - > /dev/null
            done
          else
            echo "No Terraform files found to validate"
          fi
        continue-on-error: true
  
  tfsec-scan:
    name: tfsec Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Run tfsec
        uses: aquasecurity/tfsec-action@v1.0.3
        with:
          soft_fail: false
          format: sarif
          additional_args: --minimum-severity MEDIUM
      
      - name: Upload tfsec results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: results.sarif
  
  checkov-scan:
    name: Checkov Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Run Checkov
        id: checkov
        uses: bridgecrewio/checkov-action@v12
        with:
          directory: .
          framework: terraform,terragrunt
          soft_fail: false
          output_format: sarif
          output_file_path: checkov-results.sarif
          skip_check: CKV_SECRET_6
      
      - name: Upload Checkov results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: checkov-results.sarif
  
  secret-scan:
    name: Secret Scanning
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Run Gitleaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}
  
  semgrep-scan:
    name: Semgrep SAST Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Run Semgrep
        uses: returntocorp/semgrep-action@v1
        with:
          config: >-
            p/terraform
            p/secrets
            p/security-audit
        env:
          SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}
  
  dependency-check:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'config'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'
      
      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: trivy-results.sarif
  
  terragrunt-validation:
    name: Terragrunt Validation
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Terragrunt
        run: |
          # Install Terragrunt
          TERRAGRUNT_VERSION=$(curl -s https://api.github.com/repos/gruntwork-io/terragrunt/releases/latest | grep tag_name | cut -d '"' -f 4)
          wget -q "https://github.com/gruntwork-io/terragrunt/releases/download/${TERRAGRUNT_VERSION}/terragrunt_linux_amd64" -O /usr/local/bin/terragrunt
          chmod +x /usr/local/bin/terragrunt
          terragrunt --version
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: latest
      
      - name: Validate Terragrunt configurations
        run: |
          echo "Checking for Terragrunt files..."
          if find . -name "terragrunt.hcl" -type f | head -1 | grep -q .; then
            echo "Found Terragrunt files"
            for file in $(find . -name "terragrunt.hcl"); do
              dir=$(dirname "$file")
              echo "Validating $file in $dir..."
              cd "$dir"
              terragrunt hclfmt --terragrunt-check || echo "::warning::Terragrunt file $file is not properly formatted"
              cd - > /dev/null
            done
          else
            echo "No Terragrunt files found - this is okay for a new project"
          fi
        continue-on-error: true
  
  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [terraform-security, tfsec-scan, checkov-scan, secret-scan, semgrep-scan, dependency-check, terragrunt-validation]
    if: always()
    
    steps:
      - name: Security Scan Complete
        run: |
          echo "### Security Scan Summary :shield:" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "All security scans have been completed." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Scans performed:**" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Terraform security scanning (tfsec)" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Infrastructure security policies (Checkov)" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Secret scanning (Gitleaks)" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ SAST scanning (Semgrep)" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Dependency vulnerabilities (Trivy)" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Terraform/Terragrunt validation" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Check individual job results for detailed findings." >> $GITHUB_STEP_SUMMARY
